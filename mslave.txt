Steps to Set Up Jenkins Master-Slave Architecture
Install Jenkins and Java (if not already installed):

Ensure Jenkins and Java are installed on both the master and any potential slave machines.
Set Up Jenkins on the Master Machine:

Start the Jenkins server on the master machine.
Open Jenkins in a browser (default: http://localhost:8080).
Create a Folder for Jenkins Configuration:

Go to ProgramFiles > Jenkins and create a folder to store configuration files for slave setup.
Add Path in Jenkins Configuration:

Enter the path of the folder created in the "Remote Root Directory" field when configuring the slave node in Jenkins.
Assign a label to the node to help identify it (useful for job allocation).
Adjust Security Settings:

Go to Manage Jenkins > Configure Global Security.
Adjust the security settings as needed, enabling the slave machine to communicate with the Master.
Set Up Slave Node:

In Jenkins, navigate to Manage Jenkins > Manage Nodes and Clouds > New Node.
Create a new node, set the label (as created in step 4), and input the slave machine details.
Save and connect the slave to the master by starting the slave agent (this may involve a download).
Open Command Prompt:

On the slave machine, open Command Prompt in the Jenkins folder and execute any necessary commands (e.g., Java commands to run the Jenkins agent).
Create a New Job:

In Jenkins, go to New Item, name the job, and select a job type (e.g., Freestyle project).
Add the label of the slave node to ensure that this job runs on the specified node.
Add a Java File:

In the job workspace, create a Java file named Hello.java or any file relevant to your build.
Configure Node Tools:

Go to the node settings in Jenkins, select Configure, and add any necessary tools or environment settings.
Build the Project:

Run a build by selecting the Build Now option in the job.
Jenkins will dispatch the job to the slave node as per the label configuration.
Verify and Adjust Configuration (if needed):

Check the build status, logs, and results.
Make necessary adjustments to configurations based on build outcomes.
